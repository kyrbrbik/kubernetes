fullnameOverride: prometheus

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: false
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

alertmanager:
  fullnameOverride: alertmanager
  enabled: true
  ingress:
    enabled: false
  requests:
    memory: 128Mi
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      # Default alerter
      receiver: 'null'
      routes:
      # Muted alerts
      - receiver: 'null'
        matchers: 
        - alertname =~ "Watchdog|InfoInhibitor"
      - receiver: 'discord'
    receivers:
    - name: "null"
    - name: "discord"
      slack_configs:
      - channel: "alerts"
        username: "Prometheus"
        api_url: 'https://discord.com/api/webhooks/1126586821355261952/D1FN5Tngwm5PrkiqkQbuHqzLhF5O1divylXb8pZ1Anoorf1NtTJekFHOVaPZlths4iYd/slack'
        send_resolved: true
        title: |-
          {{ index .CommonLabels "alertname" }}
        text: |-
          {{ if eq .Status "firing" }}
            :fire: *Alert:* {{ index .CommonLabels "issue" }} is {{ .Status }} 
            *Description:* {{ index .CommonAnnotations "description" }}
          {{ else }}
            :white_check_mark: *Alert:* {{ index .CommonLabels "issue" }} is {{ .Status }}
            *Description:* {{ index .CommonAnnotations "description" }}
          {{ end }}
    templates:
    - '/etc/alertmanager/config/*.tmpl'

grafana:
  enabled: true
  fullnameOverride: grafana
  forceDeployDatasources: false
  forceDeployDashboards: false
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: Europe/Prague
  serviceMonitor:
    enabled: true
  sidecar:
    dashboards:
      enabled: true
      provider:
        allowUiUpdates: true

kubeApiServer:
  enabled: true

kubeproxy:
  enabled: false

kubelet:
  enabled: true
  serviceMonitor:
    https: true
    metricRelabelings:
      - action: replace
        sourceLabels:
          - node
        targetLabel: instance


coreDns:
  enabled: true

kubeDns:
  enabled: false


kubeStateMetrics:
  enabled: true

kube-state-metrics:
  fullnameOverride: kube-state-metrics
  selfMonitor:
    enabled: true
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

nodeExporter:
  enabled: true
  serviceMonitor:
    relabelings:
      - action: replace
        regex: (.*)
        replacement: $1
        sourceLabels:
          - __meta_kubernetes_pod_node_name
        targetLabel: kubernetes_node

prometheus-node-exporter:
  fullnameOverride: node-exporter
  podLabels:
    jobLabel: node-exporter
  extraArgs:
    - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
  service:
    portName: http-metrics
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
            - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 1Gi
        
prometheusOperator:
  enabled: true

prometheus:
  enabled: true
  prometheusSpec:
    resources:
      requests:
        memory: 1Gi
        cpu: 200m
      limits:
        memory: 4Gi
    replicas: 1
    replicaExternalLabelName: "replica"
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - node3
              - node4
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - node2
    retention: 720h
    enableAdminAPI: true
    walCompression: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClass: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi


thanosRuler:
  enabled: false
